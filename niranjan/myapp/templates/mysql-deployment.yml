# Configure 'Deployment' of mysql server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.mysqldeployment.name }}
  labels:
    {{- include "mysql.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.mysqldeployment.replicas }}
  selector: # mysql Pod Should contain same labels
    matchLabels:
      {{- include "mysql.labels" . | nindent 6 }}
  strategy:
    type: {{ .Values.mysqldeployment.strategy }}
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        {{- include "mysql.labels" . | nindent 8 }}
    spec:
      containers:
        - image: "{{ .Values.mysqldeployment.image }}:{{ .Values.mysqldeployment.tag }}" # image from docker-hub
          #args:
            #- "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186
          name: {{ .Values.mysqldeployment.name }}
          env:
            - name: MYSQL_ROOT_PASSWORD # Setting Root Password of mysql From a 'Secret'
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }} # Name of the 'ConfigMap'
                  key: rootpass   # 'key' inside the ConfigMap which contains required 'value'
            - name: MYSQL_USER # Setting USER username on mysql From a 'Secret'
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }} # Name of the 'ConfigMap'
                  key: user   # 'key' inside the ConfigMap which contains required 'value'
            - name: MYSQL_PASSWORD # Setting USER Password on mysql From a 'Secret'
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }} # Name of the 'ConfigMap'
                  key: pass   # 'key' inside the ConfigMap which contains required 'value'
            - name: MYSQL_DATABASE # Setting Database Name from a 'ConfigMap'
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }} # Name of the 'ConfigMap'
                  key: dbname   # 'key' inside the ConfigMap which contains required 'value'
          ports:
            - containerPort: {{ .Values.mysqldeployment.port }}
              name: {{ .Values.mysqldeployment.name }}
          volumeMounts:        # Mounting volume obtained from Persistent Volume Claim
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql #This is the path in the container on which the mounting will take place.
      volumes:
        - name: mysql-persistent-storage # Obtaining 'volume' from PVC
          persistentVolumeClaim:
            claimName: {{ .Values.mysqlpvc.name }}